"""
Даны две строки строчных латинских символов: строка J и строка S. Символы, входящие в строку J, — «драгоценности», входящие в строку S — «камни». Нужно определить, какое количество символов из S одновременно являются «драгоценностями». Проще говоря, нужно проверить, какое количество символов из S входит в J.
Это разминочная задача, к которой мы размещаем готовые решения. Она очень простая и нужна для того, чтобы вы могли познакомиться с нашей автоматической системой проверки решений. Ввод и вывод осуществляется через файлы, либо через стандартные потоки ввода-вывода, как вам удобнее.
ввод:      вывод:
ab              4
aabbccd
"""
#
# def sum_in_text():
#     with open("input.txt", "r", encoding="UTF-8") as f:
#         j = f.readline().strip()
#         s = f.readline().strip()
#         result = 0
#         for ch in s:
#             if ch in j:
#                 result += 1
#     with open("output.txt", "w", encoding="UTF-8") as f:
#         result = str(result)
#         f.write(result)
#
#
# sum_in_text()

"""
Даны два числа A и B. Вам нужно вычислить их сумму A+B. В этой задаче вам нужно читать из стандартного ввода и выводить ответ в стандартный вывод
Ввод: 2 2      Вывод: 4
"""

# def sum_():
#     data = input().split(" ")
#     return int(data[0]) + int(data[1])
#
# print(sum_())

"""
Даны три натуральных числа. Возможно ли построить треугольник с такими сторонами? Если это возможно, выведите строку YES, иначе выведите строку NO.
Треугольник — это три точки, не лежащие на одной прямой.
"""
#
# def is_triangle():
#     a, b, c = int(input()), int(input()), int(input())
#     if c >= a and c >= b:
#         if c < a + b:
#             print("YES")
#         else:
#             print("NO")
#     elif b >= a and b >= c:
#         if b < a + c:
#             print("YES")
#         else:
#             print("NO")
#     elif a >= c and a >= b:
#         if a < c + b:
#             print("YES")
#         else:
#             print("NO")

"""
Вам дан словарь, состоящий из пар слов. Каждое слово является синонимом к парному ему слову. Все слова в словаре различны. Для одного данного слова определите его синоним.
Формат ввода
Программа получает на вход количество пар синонимов N. Далее следует N строк, каждая строка содержит ровно два слова-синонима. После этого следует одно слово.
Формат вывода
Программа должна вывести синоним к данному слову.
Ввод                Вывод
3                       Bye
Hello Hi
Bye Goodbye
List Array
Goodbye
"""

# def synonyms():
#
#     count = int(input())
#     res = []
#     for i in range(count):
#         inputs = input()
#         res.append((inputs.split()[0], inputs.split()[1]))
#     key = input()
#     for word in res:
#         if key in word:
#             if key == word[0]:
#                 print(word[1])
#             else:
#                 print(word[0])


"""
В новой программе OpenCalculator появилась новая возможность – можно настроить, какие кнопки отображаются, а какие – нет. Если кнопка не отображается на экране, то ввести соответствующую цифру с клавиатуры или копированием из другой программы нельзя. Петя настроил калькулятор так, что он отображает только кнопки с цифрами x, y, z. Напишите программу, определяющую, сможет ли Петя ввести число N, а если нет, то какое минимальное количество кнопок надо дополнительно отобразить на экране для его ввода.

Формат ввода
Сначала вводятся три различных числа из диапазона от 0 до 9: x, y и z (числа разделяются пробелами). Далее вводится целое неотрицательное число N, которое Петя хочет ввести в калькулятор. Число N не превышает 10000.

Формат вывода
Выведите, какое минимальное количество кнопок должно быть добавлено для того, чтобы можно было ввести число N (если число может быть введено с помощью уже имеющихся кнопок, выведите 0)
Ввод:       Вывод:
1 2 3           0
1123

5 7 3           2
123
"""

# def how_many():
#     counts = []
#     numbers = input()
#     counts.extend([numbers.split()[0], numbers.split()[1], numbers.split()[2]])
#     res = set(input())
#     print(sum(1 for i in res if i not in counts))
#
# how_many()

"""
Во входном файле (вы можете читать данные из файла input.txt) записан текст. Словом считается последовательность непробельных символов идущих подряд, слова разделены одним или большим числом пробелов или символами конца строки. Для каждого слова из этого текста подсчитайте, сколько раз оно встречалось в этом тексте ранее.
Формат ввода
Вводится текст.
Формат вывода
Выведите ответ на задачу.
Ввод                        Вывод:
one two one tho three           0 0 1 0 0 
"""

# def count_words():
#     with open("input.txt", "r", encoding="UTF-8") as f:
#         text = []
#         for line in f:
#             text.extend(line.strip(" \n").split())
#         res = {}
#         for word in text:
#             res[word] = res.get(word, 0) + 1 if word in res.keys() else 0
#             print(res[word], end=" ")
















